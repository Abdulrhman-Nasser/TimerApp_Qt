
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000054c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f3a  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089e  00000000  00000000  0000164a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b01  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  000029ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057b  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b3  00000000  00000000  000031df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003a92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_11>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	92 00       	.word	0x0092	; ????
  56:	ab 00       	.word	0x00ab	; ????
  58:	c4 00       	.word	0x00c4	; ????
  5a:	dd 00       	.word	0x00dd	; ????
  5c:	f5 00       	.word	0x00f5	; ????
  5e:	f5 00       	.word	0x00f5	; ????
  60:	f5 00       	.word	0x00f5	; ????
  62:	f5 00       	.word	0x00f5	; ????
  64:	f5 00       	.word	0x00f5	; ????
  66:	f5 00       	.word	0x00f5	; ????
  68:	f5 00       	.word	0x00f5	; ????
  6a:	f5 00       	.word	0x00f5	; ????
  6c:	f5 00       	.word	0x00f5	; ????
  6e:	f5 00       	.word	0x00f5	; ????
  70:	f5 00       	.word	0x00f5	; ????
  72:	f5 00       	.word	0x00f5	; ????
  74:	f5 00       	.word	0x00f5	; ????
  76:	f5 00       	.word	0x00f5	; ????
  78:	f5 00       	.word	0x00f5	; ????
  7a:	f5 00       	.word	0x00f5	; ????
  7c:	f5 00       	.word	0x00f5	; ????
  7e:	f5 00       	.word	0x00f5	; ????
  80:	f5 00       	.word	0x00f5	; ????
  82:	f5 00       	.word	0x00f5	; ????
  84:	f5 00       	.word	0x00f5	; ????
  86:	f5 00       	.word	0x00f5	; ????
  88:	f5 00       	.word	0x00f5	; ????
  8a:	f5 00       	.word	0x00f5	; ????
  8c:	f5 00       	.word	0x00f5	; ????
  8e:	f5 00       	.word	0x00f5	; ????
  90:	f5 00       	.word	0x00f5	; ????
  92:	f5 00       	.word	0x00f5	; ????
  94:	92 00       	.word	0x0092	; ????
  96:	ab 00       	.word	0x00ab	; ????
  98:	c4 00       	.word	0x00c4	; ????
  9a:	dd 00       	.word	0x00dd	; ????
  9c:	02 01       	movw	r0, r4
  9e:	1b 01       	movw	r2, r22
  a0:	34 01       	movw	r6, r8
  a2:	4d 01       	movw	r8, r26
  a4:	65 01       	movw	r12, r10
  a6:	65 01       	movw	r12, r10
  a8:	65 01       	movw	r12, r10
  aa:	65 01       	movw	r12, r10
  ac:	65 01       	movw	r12, r10
  ae:	65 01       	movw	r12, r10
  b0:	65 01       	movw	r12, r10
  b2:	65 01       	movw	r12, r10
  b4:	65 01       	movw	r12, r10
  b6:	65 01       	movw	r12, r10
  b8:	65 01       	movw	r12, r10
  ba:	65 01       	movw	r12, r10
  bc:	65 01       	movw	r12, r10
  be:	65 01       	movw	r12, r10
  c0:	65 01       	movw	r12, r10
  c2:	65 01       	movw	r12, r10
  c4:	65 01       	movw	r12, r10
  c6:	65 01       	movw	r12, r10
  c8:	65 01       	movw	r12, r10
  ca:	65 01       	movw	r12, r10
  cc:	65 01       	movw	r12, r10
  ce:	65 01       	movw	r12, r10
  d0:	65 01       	movw	r12, r10
  d2:	65 01       	movw	r12, r10
  d4:	65 01       	movw	r12, r10
  d6:	65 01       	movw	r12, r10
  d8:	65 01       	movw	r12, r10
  da:	65 01       	movw	r12, r10
  dc:	02 01       	movw	r0, r4
  de:	1b 01       	movw	r2, r22
  e0:	34 01       	movw	r6, r8
  e2:	4d 01       	movw	r8, r26

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a2 36       	cpi	r26, 0x62	; 98
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
 104:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"

void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber, unsigned char direction)
{
	switch (portname)
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	fc 01       	movw	r30, r24
 110:	e1 54       	subi	r30, 0x41	; 65
 112:	f1 09       	sbc	r31, r1
 114:	e4 32       	cpi	r30, 0x24	; 36
 116:	f1 05       	cpc	r31, r1
 118:	08 f0       	brcs	.+2      	; 0x11c <DIO_vsetPINDir+0x10>
 11a:	67 c0       	rjmp	.+206    	; 0x1ea <DIO_vsetPINDir+0xde>
 11c:	e6 5d       	subi	r30, 0xD6	; 214
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__tablejump2__>
	{
		case'A':
		case 'a':
		if(direction==1)
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	59 f4       	brne	.+22     	; 0x13e <DIO_vsetPINDir+0x32>
		{
			SET_BIT(DDRA,pinnumber);
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0x28>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x24>
 138:	82 2b       	or	r24, r18
 13a:	8a bb       	out	0x1a, r24	; 26
 13c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);
 13e:	2a b3       	in	r18, 0x1a	; 26
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_vsetPINDir+0x3e>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_vsetPINDir+0x3a>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	8a bb       	out	0x1a, r24	; 26
 154:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(direction==1)
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	59 f4       	brne	.+22     	; 0x170 <DIO_vsetPINDir+0x64>
		{
			SET_BIT(DDRB,pinnumber);
 15a:	27 b3       	in	r18, 0x17	; 23
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0x5a>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0x56>
 16a:	82 2b       	or	r24, r18
 16c:	87 bb       	out	0x17, r24	; 23
 16e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);
 170:	27 b3       	in	r18, 0x17	; 23
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_vsetPINDir+0x70>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_vsetPINDir+0x6c>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	87 bb       	out	0x17, r24	; 23
 186:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(direction==1)
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	59 f4       	brne	.+22     	; 0x1a2 <DIO_vsetPINDir+0x96>
		{
			SET_BIT(DDRC,pinnumber);
 18c:	24 b3       	in	r18, 0x14	; 20
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_vsetPINDir+0x8c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_vsetPINDir+0x88>
 19c:	82 2b       	or	r24, r18
 19e:	84 bb       	out	0x14, r24	; 20
 1a0:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_vsetPINDir+0xa2>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_vsetPINDir+0x9e>
 1b2:	80 95       	com	r24
 1b4:	82 23       	and	r24, r18
 1b6:	84 bb       	out	0x14, r24	; 20
 1b8:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(direction==1)
 1ba:	41 30       	cpi	r20, 0x01	; 1
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <DIO_vsetPINDir+0xc8>
		{
			SET_BIT(DDRD,pinnumber);
 1be:	21 b3       	in	r18, 0x11	; 17
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_vsetPINDir+0xbe>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_vsetPINDir+0xba>
 1ce:	82 2b       	or	r24, r18
 1d0:	81 bb       	out	0x11, r24	; 17
 1d2:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);
 1d4:	21 b3       	in	r18, 0x11	; 17
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_vsetPINDir+0xd4>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_vsetPINDir+0xd0>
 1e4:	80 95       	com	r24
 1e6:	82 23       	and	r24, r18
 1e8:	81 bb       	out	0x11, r24	; 17
 1ea:	08 95       	ret

000001ec <DIO_write>:
}

void DIO_write(unsigned char portname, unsigned char pinnumber, unsigned char output)
{

	switch (portname)
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	fc 01       	movw	r30, r24
 1f0:	e1 54       	subi	r30, 0x41	; 65
 1f2:	f1 09       	sbc	r31, r1
 1f4:	e4 32       	cpi	r30, 0x24	; 36
 1f6:	f1 05       	cpc	r31, r1
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <DIO_write+0x10>
 1fa:	67 c0       	rjmp	.+206    	; 0x2ca <DIO_write+0xde>
 1fc:	e2 5b       	subi	r30, 0xB2	; 178
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__tablejump2__>
	{
		case'A':
		case 'a':
		if(output==1)
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	59 f4       	brne	.+22     	; 0x21e <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);
 208:	2b b3       	in	r18, 0x1b	; 27
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0x28>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x24>
 218:	82 2b       	or	r24, r18
 21a:	8b bb       	out	0x1b, r24	; 27
 21c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 21e:	2b b3       	in	r18, 0x1b	; 27
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_write+0x3e>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_write+0x3a>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	8b bb       	out	0x1b, r24	; 27
 234:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(output==1)
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	59 f4       	brne	.+22     	; 0x250 <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);
 23a:	28 b3       	in	r18, 0x18	; 24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0x5a>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0x56>
 24a:	82 2b       	or	r24, r18
 24c:	88 bb       	out	0x18, r24	; 24
 24e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_write+0x70>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_write+0x6c>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	88 bb       	out	0x18, r24	; 24
 266:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(output==1)
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	59 f4       	brne	.+22     	; 0x282 <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);
 26c:	25 b3       	in	r18, 0x15	; 21
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_write+0x8c>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_write+0x88>
 27c:	82 2b       	or	r24, r18
 27e:	85 bb       	out	0x15, r24	; 21
 280:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 282:	25 b3       	in	r18, 0x15	; 21
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_write+0xa2>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_write+0x9e>
 292:	80 95       	com	r24
 294:	82 23       	and	r24, r18
 296:	85 bb       	out	0x15, r24	; 21
 298:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(output==1)
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	59 f4       	brne	.+22     	; 0x2b4 <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);
 29e:	22 b3       	in	r18, 0x12	; 18
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_write+0xbe>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_write+0xba>
 2ae:	82 2b       	or	r24, r18
 2b0:	82 bb       	out	0x12, r24	; 18
 2b2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 2b4:	22 b3       	in	r18, 0x12	; 18
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_write+0xd4>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_write+0xd0>
 2c4:	80 95       	com	r24
 2c6:	82 23       	and	r24, r18
 2c8:	82 bb       	out	0x12, r24	; 18
 2ca:	08 95       	ret

000002cc <LED_vInit>:
 *  Author: Abdulrhman Nasser
 */ 
#include "DIO.h"
void LED_vInit(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_vsetPINDir>
 2d2:	08 95       	ret

000002d4 <LED_vTurnOn>:
}
void LED_vTurnOn (unsigned char portname,unsigned char pinnumber)
{
	DIO_write(portname,pinnumber,1);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_write>
 2da:	08 95       	ret

000002dc <LED_vTurnOff>:
}
void LED_vTurnOff(unsigned char portname, unsigned char pinnumber)
{
	DIO_write(portname,pinnumber,0);
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_write>
 2e2:	08 95       	ret

000002e4 <main>:


int main(void)
{
    /* Replace with your application code */
	LED_vInit(red);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	81 e6       	ldi	r24, 0x61	; 97
 2e8:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_vInit>
	LED_vInit(blue);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	81 e6       	ldi	r24, 0x61	; 97
 2f0:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_vInit>
	LED_vInit(green);
 2f4:	62 e0       	ldi	r22, 0x02	; 2
 2f6:	81 e6       	ldi	r24, 0x61	; 97
 2f8:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_vInit>
	LED_vInit(buzzer);
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e6       	ldi	r24, 0x61	; 97
 300:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_vInit>
	UART_vInit(9600);
 304:	60 e8       	ldi	r22, 0x80	; 128
 306:	75 e2       	ldi	r23, 0x25	; 37
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 17 02 	call	0x42e	; 0x42e <UART_vInit>
	
    while (1) 
    {
		char x = UART_u8ReceiveData();
 310:	0e 94 3e 02 	call	0x47c	; 0x47c <UART_u8ReceiveData>
		switch (x)
 314:	86 36       	cpi	r24, 0x66	; 102
 316:	49 f1       	breq	.+82     	; 0x36a <main+0x86>
 318:	28 f4       	brcc	.+10     	; 0x324 <main+0x40>
 31a:	82 34       	cpi	r24, 0x42	; 66
 31c:	99 f1       	breq	.+102    	; 0x384 <main+0xa0>
 31e:	82 36       	cpi	r24, 0x62	; 98
 320:	69 f0       	breq	.+26     	; 0x33c <main+0x58>
 322:	f6 cf       	rjmp	.-20     	; 0x310 <main+0x2c>
 324:	8f 36       	cpi	r24, 0x6F	; 111
 326:	a1 f0       	breq	.+40     	; 0x350 <main+0x6c>
 328:	82 37       	cpi	r24, 0x72	; 114
 32a:	19 f0       	breq	.+6      	; 0x332 <main+0x4e>
 32c:	87 36       	cpi	r24, 0x67	; 103
 32e:	81 f7       	brne	.-32     	; 0x310 <main+0x2c>
 330:	0a c0       	rjmp	.+20     	; 0x346 <main+0x62>
		{
			case 'r':
				LED_vTurnOn(red);
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	81 e6       	ldi	r24, 0x61	; 97
 336:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_vTurnOn>
				break;
 33a:	ea cf       	rjmp	.-44     	; 0x310 <main+0x2c>
			case 'b':
				LED_vTurnOn(blue);
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	81 e6       	ldi	r24, 0x61	; 97
 340:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_vTurnOn>
				break;
 344:	e5 cf       	rjmp	.-54     	; 0x310 <main+0x2c>
			case 'g':
				LED_vTurnOn(green);
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	81 e6       	ldi	r24, 0x61	; 97
 34a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_vTurnOn>
				break;
 34e:	e0 cf       	rjmp	.-64     	; 0x310 <main+0x2c>
			case 'o':
				LED_vTurnOn(red);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	81 e6       	ldi	r24, 0x61	; 97
 354:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_vTurnOn>
				LED_vTurnOn(green);
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	81 e6       	ldi	r24, 0x61	; 97
 35c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_vTurnOn>
				LED_vTurnOn(blue);
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	81 e6       	ldi	r24, 0x61	; 97
 364:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_vTurnOn>
				break;
 368:	d3 cf       	rjmp	.-90     	; 0x310 <main+0x2c>
			case 'f':
				LED_vTurnOff(red);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	81 e6       	ldi	r24, 0x61	; 97
 36e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LED_vTurnOff>
				LED_vTurnOff(green);
 372:	62 e0       	ldi	r22, 0x02	; 2
 374:	81 e6       	ldi	r24, 0x61	; 97
 376:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LED_vTurnOff>
				LED_vTurnOff(blue);
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	81 e6       	ldi	r24, 0x61	; 97
 37e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LED_vTurnOff>
				break;
 382:	c6 cf       	rjmp	.-116    	; 0x310 <main+0x2c>
			case 'B':
				LED_vTurnOn(buzzer);					
 384:	63 e0       	ldi	r22, 0x03	; 3
 386:	81 e6       	ldi	r24, 0x61	; 97
 388:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_vTurnOn>
				vInit_Timer0_NormalMode();
 38c:	0e 94 01 02 	call	0x402	; 0x402 <vInit_Timer0_NormalMode>
				break;
 390:	bf cf       	rjmp	.-130    	; 0x310 <main+0x2c>

00000392 <__vector_11>:
		}
    }
}

ISR(TIMER0_OVF_vect)
{
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	counter++;
 3b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3b8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(counter==50)
 3c6:	c2 97       	sbiw	r24, 0x32	; 50
 3c8:	59 f4       	brne	.+22     	; 0x3e0 <__vector_11+0x4e>
	{
		LED_vTurnOff(buzzer);
 3ca:	63 e0       	ldi	r22, 0x03	; 3
 3cc:	81 e6       	ldi	r24, 0x61	; 97
 3ce:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LED_vTurnOff>
		counter =0;
 3d2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		CLR_BIT(TIMSK,TOIE0);
 3da:	89 b7       	in	r24, 0x39	; 57
 3dc:	8e 7f       	andi	r24, 0xFE	; 254
 3de:	89 bf       	out	0x39, r24	; 57
	}
}
 3e0:	ff 91       	pop	r31
 3e2:	ef 91       	pop	r30
 3e4:	bf 91       	pop	r27
 3e6:	af 91       	pop	r26
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	7f 91       	pop	r23
 3ee:	6f 91       	pop	r22
 3f0:	5f 91       	pop	r21
 3f2:	4f 91       	pop	r20
 3f4:	3f 91       	pop	r19
 3f6:	2f 91       	pop	r18
 3f8:	0f 90       	pop	r0
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	0f 90       	pop	r0
 3fe:	1f 90       	pop	r1
 400:	18 95       	reti

00000402 <vInit_Timer0_NormalMode>:
#include <avr/io.h>
#include "std_macros.h"
#include <avr/interrupt.h>
void vInit_Timer0_NormalMode()
{
	CLR_BIT(TCCR0,WGM01);
 402:	83 b7       	in	r24, 0x33	; 51
 404:	87 7f       	andi	r24, 0xF7	; 247
 406:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM00); //Choose Normal mode
 408:	83 b7       	in	r24, 0x33	; 51
 40a:	8f 7b       	andi	r24, 0xBF	; 191
 40c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
 40e:	83 b7       	in	r24, 0x33	; 51
 410:	81 60       	ori	r24, 0x01	; 1
 412:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
 414:	83 b7       	in	r24, 0x33	; 51
 416:	8d 7f       	andi	r24, 0xFD	; 253
 418:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02); //Set prescaler to /1024
 41a:	83 b7       	in	r24, 0x33	; 51
 41c:	84 60       	ori	r24, 0x04	; 4
 41e:	83 bf       	out	0x33, r24	; 51
	sei();
 420:	78 94       	sei
	SET_BIT(TIMSK,TOIE0); //Enable interrupt
 422:	89 b7       	in	r24, 0x39	; 57
 424:	81 60       	ori	r24, 0x01	; 1
 426:	89 bf       	out	0x39, r24	; 57
	TCNT0=156; //Preload value
 428:	8c e9       	ldi	r24, 0x9C	; 156
 42a:	82 bf       	out	0x32, r24	; 50
 42c:	08 95       	ret

0000042e <UART_vInit>:
void UART_vSendData(char data)
{
	//wait for UDR transmit buffer to be empty
	while (!READ_BIT(UCSRA,UDRE));
	//Put data in UDR
	UDR=data;
 42e:	dc 01       	movw	r26, r24
 430:	cb 01       	movw	r24, r22
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	aa 1f       	adc	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	aa 1f       	adc	r26, r26
 440:	bb 1f       	adc	r27, r27
 442:	9c 01       	movw	r18, r24
 444:	ad 01       	movw	r20, r26
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	44 1f       	adc	r20, r20
 44c:	55 1f       	adc	r21, r21
 44e:	22 0f       	add	r18, r18
 450:	33 1f       	adc	r19, r19
 452:	44 1f       	adc	r20, r20
 454:	55 1f       	adc	r21, r21
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	72 e1       	ldi	r23, 0x12	; 18
 45a:	8a e7       	ldi	r24, 0x7A	; 122
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 42 02 	call	0x484	; 0x484 <__udivmodsi4>
 462:	21 50       	subi	r18, 0x01	; 1
 464:	31 09       	sbc	r19, r1
 466:	30 bd       	out	0x20, r19	; 32
 468:	29 b9       	out	0x09, r18	; 9
 46a:	8a b1       	in	r24, 0x0a	; 10
 46c:	88 60       	ori	r24, 0x08	; 8
 46e:	8a b9       	out	0x0a, r24	; 10
 470:	8a b1       	in	r24, 0x0a	; 10
 472:	80 61       	ori	r24, 0x10	; 16
 474:	8a b9       	out	0x0a, r24	; 10
 476:	86 e8       	ldi	r24, 0x86	; 134
 478:	80 bd       	out	0x20, r24	; 32
 47a:	08 95       	ret

0000047c <UART_u8ReceiveData>:
}
char UART_u8ReceiveData(void)
{
	//wait for UDR recieve buffer to be filled with data
	while (!READ_BIT(UCSRA,RXC));
 47c:	5f 9b       	sbis	0x0b, 7	; 11
 47e:	fe cf       	rjmp	.-4      	; 0x47c <UART_u8ReceiveData>
	return UDR;
 480:	8c b1       	in	r24, 0x0c	; 12
}
 482:	08 95       	ret

00000484 <__udivmodsi4>:
 484:	a1 e2       	ldi	r26, 0x21	; 33
 486:	1a 2e       	mov	r1, r26
 488:	aa 1b       	sub	r26, r26
 48a:	bb 1b       	sub	r27, r27
 48c:	fd 01       	movw	r30, r26
 48e:	0d c0       	rjmp	.+26     	; 0x4aa <__udivmodsi4_ep>

00000490 <__udivmodsi4_loop>:
 490:	aa 1f       	adc	r26, r26
 492:	bb 1f       	adc	r27, r27
 494:	ee 1f       	adc	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	a2 17       	cp	r26, r18
 49a:	b3 07       	cpc	r27, r19
 49c:	e4 07       	cpc	r30, r20
 49e:	f5 07       	cpc	r31, r21
 4a0:	20 f0       	brcs	.+8      	; 0x4aa <__udivmodsi4_ep>
 4a2:	a2 1b       	sub	r26, r18
 4a4:	b3 0b       	sbc	r27, r19
 4a6:	e4 0b       	sbc	r30, r20
 4a8:	f5 0b       	sbc	r31, r21

000004aa <__udivmodsi4_ep>:
 4aa:	66 1f       	adc	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	88 1f       	adc	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	1a 94       	dec	r1
 4b4:	69 f7       	brne	.-38     	; 0x490 <__udivmodsi4_loop>
 4b6:	60 95       	com	r22
 4b8:	70 95       	com	r23
 4ba:	80 95       	com	r24
 4bc:	90 95       	com	r25
 4be:	9b 01       	movw	r18, r22
 4c0:	ac 01       	movw	r20, r24
 4c2:	bd 01       	movw	r22, r26
 4c4:	cf 01       	movw	r24, r30
 4c6:	08 95       	ret

000004c8 <__tablejump2__>:
 4c8:	ee 0f       	add	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	05 90       	lpm	r0, Z+
 4ce:	f4 91       	lpm	r31, Z
 4d0:	e0 2d       	mov	r30, r0
 4d2:	09 94       	ijmp

000004d4 <_exit>:
 4d4:	f8 94       	cli

000004d6 <__stop_program>:
 4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <__stop_program>
